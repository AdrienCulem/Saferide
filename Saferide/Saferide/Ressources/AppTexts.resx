<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddressView" xml:space="preserve">
    <value>Address : </value>
  </data>
  <data name="BothFields" xml:space="preserve">
    <value>Both email and password needs to be completed</value>
  </data>
  <data name="Danger" xml:space="preserve">
    <value>Danger</value>
  </data>
  <data name="Email" xml:space="preserve">
    <value>Email</value>
  </data>
  <data name="HeadingView" xml:space="preserve">
    <value>Heading : </value>
  </data>
  <data name="Hole" xml:space="preserve">
    <value>Hole</value>
  </data>
  <data name="Home" xml:space="preserve">
    <value>Home</value>
  </data>
  <data name="Incidents" xml:space="preserve">
    <value>Incidents</value>
  </data>
  <data name="Saferide" xml:space="preserve">
    <value>Saferide</value>
  </data>
  <data name="Kilometersperhour" xml:space="preserve">
    <value>km/h</value>
  </data>
  <data name="LatitudeView" xml:space="preserve">
    <value>Latitude : </value>
  </data>
  <data name="Login" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="Logoff" xml:space="preserve">
    <value>Log off</value>
  </data>
  <data name="LongitudeView" xml:space="preserve">
    <value>Longitude : </value>
  </data>
  <data name="Obstacle" xml:space="preserve">
    <value>Obstacle</value>
  </data>
  <data name="Oups" xml:space="preserve">
    <value>Something went wrong :/ </value>
  </data>
  <data name="Password" xml:space="preserve">
    <value>Password</value>
  </data>
  <data name="StartRiding" xml:space="preserve">
    <value>Start riding</value>
  </data>
  <data name="StopRiding" xml:space="preserve">
    <value>Stop riding</value>
  </data>
  <data name="PositionView" xml:space="preserve">
    <value>Position : </value>
  </data>
  <data name="Register" xml:space="preserve">
    <value>Register</value>
  </data>
  <data name="Registering" xml:space="preserve">
    <value>Please register on the website by clicking the button down bellow</value>
  </data>
  <data name="SendAnIncident" xml:space="preserve">
    <value>You just sinagled and incident!</value>
  </data>
  <data name="SlidingZone" xml:space="preserve">
    <value>Sliding Zone</value>
  </data>
  <data name="SpeedView" xml:space="preserve">
    <value>Speed : </value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome to Saferide ! </value>
  </data>
  <data name="WrongLogins" xml:space="preserve">
    <value>Password or email is incorrect</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Done</value>
  </data>
  <data name="EnterDescription" xml:space="preserve">
    <value>Enter the description here</value>
  </data>
  <data name="WaitASec" xml:space="preserve">
    <value>Wait a second</value>
  </data>
  <data name="Heading" xml:space="preserve">
    <value>Heading</value>
  </data>
  <data name="Map" xml:space="preserve">
    <value>Map</value>
  </data>
  <data name="Speed" xml:space="preserve">
    <value>Speed</value>
  </data>
  <data name="AddIncident" xml:space="preserve">
    <value>Add incident</value>
  </data>
  <data name="E" xml:space="preserve">
    <value>E</value>
  </data>
  <data name="EnableLocation" xml:space="preserve">
    <value>U need to enable location first</value>
  </data>
  <data name="ENE" xml:space="preserve">
    <value>ENE</value>
  </data>
  <data name="ESE" xml:space="preserve">
    <value>ESE</value>
  </data>
  <data name="Go" xml:space="preserve">
    <value>Go</value>
  </data>
  <data name="InternetError" xml:space="preserve">
    <value>Something wrong happened, check your internet connection</value>
  </data>
  <data name="Kilometers" xml:space="preserve">
    <value>Kilometers</value>
  </data>
  <data name="Listen" xml:space="preserve">
    <value>Listen</value>
  </data>
  <data name="ListenNewIncident" xml:space="preserve">
    <value>new incident</value>
  </data>
  <data name="ListenStartRiding" xml:space="preserve">
    <value>start riding</value>
  </data>
  <data name="ListenStopRiding" xml:space="preserve">
    <value>stop riding</value>
  </data>
  <data name="Meters" xml:space="preserve">
    <value>Meters</value>
  </data>
  <data name="N" xml:space="preserve">
    <value>N</value>
  </data>
  <data name="NE" xml:space="preserve">
    <value>NE</value>
  </data>
  <data name="NewDanger" xml:space="preserve">
    <value>danger</value>
  </data>
  <data name="NewHole" xml:space="preserve">
    <value>hole</value>
  </data>
  <data name="NewObstacle" xml:space="preserve">
    <value>obstacle</value>
  </data>
  <data name="NewSlidingZone" xml:space="preserve">
    <value>sliding zone</value>
  </data>
  <data name="NNE" xml:space="preserve">
    <value>NNE</value>
  </data>
  <data name="NNW" xml:space="preserve">
    <value>NNW</value>
  </data>
  <data name="NW" xml:space="preserve">
    <value>NW</value>
  </data>
  <data name="S" xml:space="preserve">
    <value>S</value>
  </data>
  <data name="SE" xml:space="preserve">
    <value>SE</value>
  </data>
  <data name="SignalIncident" xml:space="preserve">
    <value>There is an incident of the type {0} in {1} {2}. The description is {3}</value>
    <comment>3 variables for the type of the incident, the distance and the metric unit</comment>
  </data>
  <data name="SSE" xml:space="preserve">
    <value>SSE</value>
  </data>
  <data name="SSW" xml:space="preserve">
    <value>SSW</value>
  </data>
  <data name="StartRidingFirst" xml:space="preserve">
    <value>U need to start riding first</value>
  </data>
  <data name="SW" xml:space="preserve">
    <value>SW</value>
  </data>
  <data name="W" xml:space="preserve">
    <value>W</value>
  </data>
  <data name="WNW" xml:space="preserve">
    <value>WNW</value>
  </data>
  <data name="WSW" xml:space="preserve">
    <value>WSW</value>
  </data>
  <data name="ForgotPassword" xml:space="preserve">
    <value>Forgot your password?</value>
  </data>
  <data name="ConnectedAs" xml:space="preserve">
    <value>Connected as : </value>
  </data>
  <data name="Speak" xml:space="preserve">
    <value>Speak</value>
  </data>
  <data name="WhatOptionForIncident" xml:space="preserve">
    <value>How would you give the description?</value>
  </data>
  <data name="Write" xml:space="preserve">
    <value>Write</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>Confirm?</value>
  </data>
  <data name="ConfirmText" xml:space="preserve">
    <value>Do you confirm that the incident was there?</value>
  </data>
  <data name="No" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="MilesPerHour" xml:space="preserve">
    <value>M.P.H</value>
  </data>
  <data name="ChooseUnitSystem" xml:space="preserve">
    <value>Choose the unit system</value>
  </data>
  <data name="AvailableCommands" xml:space="preserve">
    <value>To use the vocal recognition just press the listen button then say the texts that is displayed on the screen to click on that button.</value>
  </data>
  <data name="Help" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="Settings" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="SomeInfos" xml:space="preserve">
    <value>Here are some informations about the app</value>
  </data>
  <data name="ClickHere" xml:space="preserve">
    <value>Click here</value>
  </data>
  <data name="SpeakNow" xml:space="preserve">
    <value>Speak now</value>
  </data>
  <data name="NoListen" xml:space="preserve">
    <value>no</value>
  </data>
  <data name="YesListen" xml:space="preserve">
    <value>yes</value>
  </data>
  <data name="GiveADescription" xml:space="preserve">
    <value>Describe the incident please.</value>
  </data>
  <data name="GiveANewIncident" xml:space="preserve">
    <value>Which type of incident would you like to report?</value>
  </data>
  <data name="GoToNewIncident" xml:space="preserve">
    <value>Just say new incident to start reporting an incident</value>
  </data>
</root>