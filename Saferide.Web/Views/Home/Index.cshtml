@model IEnumerable<Saferide.Web.Models.Poco.Incident>
@{
    ViewBag.Title = "Home Page";
}
<input id="pac-input" class="controls" type="text" placeholder="Search location">
<div id="map_populate"></div>
<script src="https://maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&key=AIzaSyAyzSsHSecQ8cMLqQb4rACLe2OMjV4wwLQ&libraries=places" type="text/javascript"></script>
<script>

    var mapcode, markerLatLng, title, infoWindow, map, lnt, mapOptions;
    mapcode = new google.maps.Geocoder();
    lnt = new google.maps.LatLng(50.6657, 4.5868);
    mapOptions = {
        zoom: 13,
        center: lnt,
        diagId: google.maps.MapTypeId.ROADMAP
    }
    map = new google.maps.Map(document.getElementById('map_populate'), mapOptions);
    @foreach (var item in Model)
    {
        <text>
    markerLatLng = new google.maps.LatLng(@(item.Latitude), @(item.Longitude));
    title = '@(item.IncidentType)';
    var contentString@(item.IncidentId) = "<h3>@(item.IncidentType)</h3><b>@(item.Description)</b>";
    var marker@(item.IncidentId) = new google.maps.Marker({
        position: markerLatLng,
        title: title,
        map: map,
        draggable: false
    });
    (function(marker@(item.IncidentId)) {
        google.maps.event.addListener(marker@(item.IncidentId),
            'click',
            function() {
                var infoWindow@(item.IncidentId) = new google.maps.InfoWindow({
                    content: contentString@(item.IncidentId)
                });
                infoWindow@(item.IncidentId).open(map, marker@(item.IncidentId));
            });
    })(marker@(item.IncidentId));
        </text>
    }

    var input = document.getElementById('pac-input');
    var searchBox = new google.maps.places.SearchBox(input);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    // Bias the SearchBox results towards current map's viewport.
    map.addListener('bounds_changed', function() {
        searchBox.setBounds(map.getBounds());
    });

    var markers = [];
    // Listen for the event fired when the user selects a prediction and retrieve
    // more details for that place.
    searchBox.addListener('places_changed', function() {
        var places = searchBox.getPlaces();

        if (places.length == 0) {
            return;
        }

        // Clear out the old markers.
        markers.forEach(function(marker) {
            marker.setMap(null);
        });
        markers = [];

        // For each place, get the icon, name and location.
        var bounds = new google.maps.LatLngBounds();
        places.forEach(function(place) {
            if (!place.geometry) {
                console.log("Returned place contains no geometry");
                return;
            }
            var icon = {
                url: place.icon,
                size: new google.maps.Size(71, 71),
                origin: new google.maps.Point(0, 0),
                anchor: new google.maps.Point(17, 34),
                scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
                map: map,
                icon: icon,
                title: place.name,
                position: place.geometry.location
            }));

            if (place.geometry.viewport) {
                // Only geocodes have viewport.
                bounds.union(place.geometry.viewport);
            } else {
                bounds.extend(place.geometry.location);
            }
        });
        map.fitBounds(bounds);
    });
</script>